/// <reference types="node" />
import { RequestListener } from 'http';
import * as apigw from './types';
declare namespace handler {
    type APIGatewayEvent = apigw.APIGatewayEvent;
    type APIGatewayResponse = apigw.LambdaResponse;
    type LambdaResponse = apigw.LambdaResponse;
    type LambdaContext = apigw.LambdaContext;
    type APIGatewayEventHandler = (event: handler.APIGatewayEvent, context?: handler.LambdaContext) => Promise<handler.LambdaResponse>;
}
declare type PromiseFactory<A> = () => Promise<A>;
declare const handler: {
    (app: RequestListener): handler.APIGatewayEventHandler;
    deferred: (appFn: PromiseFactory<RequestListener>) => handler.APIGatewayEventHandler;
    HapiListener: typeof import("in-process-request/dist/compile/hapiListener").HapiListener;
    nestHandler: (nestApp: any) => Promise<any>;
    fastifyHandler: (fastifyBuilder: (options: object) => any) => (options: object) => Promise<RequestListener>;
};
export = handler;
