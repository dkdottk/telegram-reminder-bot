"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const url = __importStar(require("url"));
const getValuesFromStringAndMultiString = (stringMap, multiStringMap, lcKeys = true) => {
    const retVal = {};
    const singleMap = stringMap || {};
    Object.keys(singleMap).forEach(k => {
        retVal[lcKeys ? k.toLowerCase() : k] = singleMap[k];
    });
    const multiMap = multiStringMap || {};
    Object.keys(multiMap).forEach(k => {
        // get the last value
        retVal[lcKeys ? k.toLowerCase() : k] = multiMap[k][multiMap[k].length - 1];
    });
    return retVal;
};
const eventToRequestOptions = (event, ctx) => {
    var _a, _b, _c, _d, _e, _f;
    let remoteAddress = undefined;
    let ssl = false;
    const queryStringParams = getValuesFromStringAndMultiString(event.queryStringParameters, event.multiValueQueryStringParameters, false);
    const headers = getValuesFromStringAndMultiString(event.headers, event.multiValueHeaders);
    if (Array.isArray(event.cookies)) {
        headers['cookie'] = event.cookies.join('; ');
    }
    if (ctx) {
        headers['x-aws-lambda-request-id'] = ctx.awsRequestId;
    }
    if ((_a = event.requestContext) === null || _a === void 0 ? void 0 : _a.elb) {
        //load balancer request - it has the client ip in x-forwarded-for header
        if (typeof headers['x-forwarded-for'] === 'string') {
            const ips = headers['x-forwarded-for'].split(',').map(ip => ip.trim());
            remoteAddress = ips.splice(-1, 1)[0];
            headers['x-forwarded-for'] = ips.join(', ');
            ssl = headers['x-forwarded-proto'] === 'https';
            if (ips.length === 0) {
                delete headers['x-forwarded-for'];
                delete headers['x-forwarded-port'];
                delete headers['x-forwarded-proto'];
            }
        }
        //elb doesn't uri decode query string params
        Object.keys(queryStringParams).forEach(k => {
            queryStringParams[k] = decodeURIComponent(queryStringParams[k]);
        });
    }
    else {
        // api gateway request
        ssl = true;
        const remoteAddressList = ((_c = (_b = event.requestContext) === null || _b === void 0 ? void 0 : _b.identity) === null || _c === void 0 ? void 0 : _c.sourceIp) || ((_e = (_d = event.requestContext) === null || _d === void 0 ? void 0 : _d.http) === null || _e === void 0 ? void 0 : _e.sourceIp);
        if (remoteAddressList) {
            // HTTP API includes the full x-forwarder for chain here and the remote ip is the last element
            const items = remoteAddressList.split(',').map(s => s.trim());
            remoteAddress = items[items.length - 1];
        }
    }
    let method = event.httpMethod;
    let path = event.path;
    if (typeof ((_f = event.requestContext) === null || _f === void 0 ? void 0 : _f.http) === 'object') {
        method = event.requestContext.http.method;
        path = event.requestContext.http.path;
    }
    return {
        method,
        path: url.format({ pathname: path, query: queryStringParams }),
        headers: headers,
        body: Buffer.from(event.body || '', event.isBase64Encoded ? 'base64' : 'utf8'),
        ssl,
        remoteAddress
    };
};
exports.default = eventToRequestOptions;
