"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const in_process_request_1 = __importDefault(require("in-process-request"));
const eventToRequestOptions_1 = __importDefault(require("./eventToRequestOptions"));
const response_1 = require("./response");
;
const eventHasMultiValueHeaders = (event) => {
    return event.multiValueHeaders !== null && typeof event.multiValueHeaders === 'object';
};
const eventSupportsCookies = (event) => {
    return event.version === "2.0" && !eventHasMultiValueHeaders(event);
};
const handlerBuilder = (appFn) => {
    let appHandler;
    return (event, ctx) => __awaiter(void 0, void 0, void 0, function* () {
        if (!appHandler) {
            const resolvedApp = yield appFn();
            appHandler = in_process_request_1.default(resolvedApp);
        }
        try {
            const reqOptions = eventToRequestOptions_1.default(event, ctx);
            const mockResponse = yield appHandler(reqOptions);
            return response_1.inProcessResponseToLambdaResponse(mockResponse, eventHasMultiValueHeaders(event), eventSupportsCookies(event));
        }
        catch (e) {
            console.error(e);
            return response_1.errorResponse();
        }
    });
};
const handler = (app) => handlerBuilder(() => Promise.resolve(app));
handler.deferred = handlerBuilder;
handler.HapiListener = in_process_request_1.default.HapiListener;
handler.nestHandler = in_process_request_1.default.nestHandler;
handler.fastifyHandler = in_process_request_1.default.fastifyHandler;
module.exports = handler;
